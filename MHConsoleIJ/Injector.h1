#pragma once
#include "DllData.h"

typedef HMODULE(WINAPI *pLoadLibraryA)(LPCSTR);
typedef HMODULE(WINAPI *pGetModuleHandleA)(LPCTSTR);
typedef FARPROC(WINAPI *pGetProcAddress)(HMODULE, LPCSTR);
typedef BOOL(WINAPI *PDLL_MAIN)(PCHAR, DWORD, PVOID);
typedef struct _MANUAL_INJECT {
	PVOID ImageBase;
	PIMAGE_NT_HEADERS NtHeaders;
	PIMAGE_BASE_RELOCATION BaseRelocation;
	PIMAGE_IMPORT_DESCRIPTOR ImportDirectory;
	pLoadLibraryA fnLoadLibraryA;
	pGetModuleHandleA fnGetModuleHandleA;
	pGetProcAddress fnGetProcAddress;
	char DllPatch[MAX_PATH];
}MANUAL_INJECT, *PMANUAL_INJECT;
DWORD WINAPI LoadDllStub(PVOID p) {
	PMANUAL_INJECT ManualInject;
	HMODULE hModule;
	DWORD Function, count, delta;
	PDWORD ptr;
	PWORD list;
	PIMAGE_BASE_RELOCATION pIBR;
	PIMAGE_IMPORT_DESCRIPTOR pIID;
	PIMAGE_IMPORT_BY_NAME pIBN;
	PIMAGE_THUNK_DATA FirstThunk, OrigFirstThunk;
	PDLL_MAIN EntryPoint;
	ManualInject = (PMANUAL_INJECT)p;
	pIBR = ManualInject->BaseRelocation;
	delta = (DWORD)((LPBYTE)ManualInject->ImageBase - ManualInject->NtHeaders->OptionalHeader.ImageBase);
	while (pIBR->VirtualAddress) {
		if (pIBR->SizeOfBlock >= sizeof(IMAGE_BASE_RELOCATION)) {
			count = (pIBR->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);
			list = (PWORD)(pIBR + 1);
			for (DWORD i = 0; i < count; i++) {
				if (list[i]) {
					ptr = (PDWORD)((LPBYTE)ManualInject->ImageBase + (pIBR->VirtualAddress + (list[i] & 0xFFF)));
					*ptr += delta;
				}
			}
		}
		pIBR = (PIMAGE_BASE_RELOCATION)((LPBYTE)pIBR + pIBR->SizeOfBlock);
	}
	pIID = ManualInject->ImportDirectory;
	while (pIID->Characteristics) {
		OrigFirstThunk = (PIMAGE_THUNK_DATA)((LPBYTE)ManualInject->ImageBase + pIID->OriginalFirstThunk);
		FirstThunk = (PIMAGE_THUNK_DATA)((LPBYTE)ManualInject->ImageBase + pIID->FirstThunk);
		hModule = ManualInject->fnGetModuleHandleA((LPCSTR)ManualInject->ImageBase + pIID->Name);
		if (!hModule) {
			hModule = ManualInject->fnLoadLibraryA((LPCSTR)ManualInject->ImageBase + pIID->Name);
			if (!hModule)return FALSE;
		}
		while (OrigFirstThunk->u1.AddressOfData) {
			if (OrigFirstThunk->u1.Ordinal & IMAGE_ORDINAL_FLAG) {
				Function = (DWORD)ManualInject->fnGetProcAddress(hModule, (LPCSTR)(OrigFirstThunk->u1.Ordinal & 0xFFFF));
				if (!Function)return FALSE;
				FirstThunk->u1.Function = Function;
			}
			else {
				pIBN = (PIMAGE_IMPORT_BY_NAME)((LPBYTE)ManualInject->ImageBase + OrigFirstThunk->u1.AddressOfData);
				Function = (DWORD)ManualInject->fnGetProcAddress(hModule, (LPCSTR)pIBN->Name);
				if (!Function)return FALSE;
				FirstThunk->u1.Function = Function;
			}
			OrigFirstThunk++;
			FirstThunk++;
		}
		pIID++;
	}
	if (ManualInject->NtHeaders->OptionalHeader.AddressOfEntryPoint) {
		EntryPoint = (PDLL_MAIN)((LPBYTE)ManualInject->ImageBase + ManualInject->NtHeaders->OptionalHeader.AddressOfEntryPoint);
		bool EntryRet = EntryPoint(0, DLL_PROCESS_ATTACH, NULL);
		if (EntryRet) {
			DWORD EndAddress = ((DWORD)ManualInject->NtHeaders + sizeof(IMAGE_NT_HEADERS)) + (ManualInject->NtHeaders->FileHeader.NumberOfSections * sizeof(IMAGE_SECTION_HEADER));
			DWORD Size = (DWORD)EndAddress - (DWORD)ManualInject->ImageBase;
			for (DWORD i = 0; i < Size; i++)*(PBYTE)((DWORD)ManualInject->ImageBase + i) = 0x00;
		}
		return EntryRet;
	}
	return TRUE;
}
DWORD WINAPI LoadDllEnd() {
	return 0;
}
int map(unsigned int pid)
{
	PIMAGE_DOS_HEADER pIDH;
	PIMAGE_NT_HEADERS pINH;
	PIMAGE_SECTION_HEADER pISH;

	HANDLE hProcess, hThread, hFile;
	PVOID buffer, image, mem;
	DWORD i, FileSize, ProcessId, ExitCode, read;


	MANUAL_INJECT ManualInject;



	size_t dwSize = sizeof(rawData);



	PBYTE lpAddress = rawData;
	buffer = VirtualAlloc(NULL, dwSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	//if (!buffer)
	//{
	//

	//	CloseHandle(lpAddress);
	//	return -1;
	//}

	// Read the DLL

	if (!memcpy((void*)buffer, (void*)lpAddress, dwSize)/*ReadFile(hFile, buffer, dwSize, &read, NULL)*/)
	{
		//    _cprintf("\nError: Unable to read the DLL (%d)\n", GetLastError());

		VirtualFree(buffer, 0, MEM_RELEASE);
		CloseHandle(lpAddress);

		return -1;
	}

	CloseHandle(lpAddress);

	pIDH = (PIMAGE_DOS_HEADER)buffer;

	if (pIDH->e_magic != IMAGE_DOS_SIGNATURE)
	{
		//  _cprintf("\nError: Invalid executable image.\n");

		VirtualFree(buffer, 0, MEM_RELEASE);
		return -1;
	}

	pINH = (PIMAGE_NT_HEADERS)((LPBYTE)buffer + pIDH->e_lfanew);

	if (pINH->Signature != IMAGE_NT_SIGNATURE)
	{
		//  _cprintf("\nError: Invalid PE header.\n");

		VirtualFree(buffer, 0, MEM_RELEASE);
		return -1;
	}

	if (!(pINH->FileHeader.Characteristics & IMAGE_FILE_DLL))
	{
		//   _cprintf("\nError: The image is not DLL.\n");

		VirtualFree(buffer, 0, MEM_RELEASE);
		return -1;
	}

	ProcessId = pid;

	//  _cprintf("\nOpening target process.\n");

	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, ProcessId);


	//hProcess = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, ProcessId);

	if (!hProcess)
	{
		//  _cprintf("\nError: Unable to open target process (%d)\n", GetLastError());

		VirtualFree(buffer, 0, MEM_RELEASE);
		CloseHandle(hProcess);

		return -1;
	}

	//  _cprintf("\nAllocating memory for the DLL.\n");

	image = VirtualAllocEx(hProcess, NULL, pINH->OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); // Allocate memory for the DLL

	if (!image)
	{
		//  _cprintf("\nError: Unable to allocate memory for the DLL (%d)\n", GetLastError());

		VirtualFree(buffer, 0, MEM_RELEASE);
		CloseHandle(hProcess);

		return -1;
	}

	// Copy the header to target process

	//  _cprintf("\nCopying headers into target process.\n");

	if (!WriteProcessMemory(hProcess, image, buffer, pINH->OptionalHeader.SizeOfHeaders, NULL))
	{

		//  _cprintf("\nError: Unable to copy headers to target process (%d)\n", GetLastError());

		VirtualFreeEx(hProcess, image, 0, MEM_RELEASE);
		CloseHandle(hProcess);

		VirtualFree(buffer, 0, MEM_RELEASE);
		return -1;
	}

	pISH = (PIMAGE_SECTION_HEADER)(pINH + 1);

	// Copy the DLL to target process

	// _cprintf("\nCopying sections to target process.\n");

	for (i = 0; i < pINH->FileHeader.NumberOfSections; i++)
	{
		WriteProcessMemory(hProcess, (PVOID)((LPBYTE)image + pISH[i].VirtualAddress), (PVOID)((LPBYTE)buffer + pISH[i].PointerToRawData), pISH[i].SizeOfRawData, NULL);
	}

	//  _cprintf("\nAllocating memory for the loader code.\n");

	mem = VirtualAllocEx(hProcess, NULL, 4096, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); // Allocate memory for the loader code

	//if (!mem)
	//{

	//	// _cprintf("\nError: Unable to allocate memory for the loader code (%d)\n", GetLastError());

	//	VirtualFreeEx(hProcess, image, 0, MEM_RELEASE);
	//	LPVOID pShellcode = VirtualAllocEx(hProcess, NULL, 4096, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	//	CloseHandle(hProcess);

	//	VirtualFree(buffer, 0, MEM_RELEASE);
	//	return -1;
	//}

	// _cprintf("\nLoader code allocated at %#p\n", mem);

	memset(&ManualInject, 0, sizeof(MANUAL_INJECT));
	ManualInject.ImageBase = image;
	ManualInject.NtHeaders = (PIMAGE_NT_HEADERS)((LPBYTE)image + pIDH->e_lfanew);
	ManualInject.BaseRelocation = (PIMAGE_BASE_RELOCATION)((LPBYTE)image + pINH->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);
	ManualInject.ImportDirectory = (PIMAGE_IMPORT_DESCRIPTOR)((LPBYTE)image + pINH->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);
	ManualInject.fnLoadLibraryA = LoadLibraryA;
	ManualInject.fnGetModuleHandleA = GetModuleHandleA;
	ManualInject.fnGetProcAddress = GetProcAddress;
	WriteProcessMemory(hProcess, mem, &ManualInject, sizeof(MANUAL_INJECT), NULL);
	WriteProcessMemory(hProcess, (PVOID)((PMANUAL_INJECT)mem + 1), LoadDllStub, (DWORD)LoadDllEnd - (DWORD)LoadDllStub, NULL);
	hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)((PMANUAL_INJECT)mem + 1), mem, 0, NULL);
	if (!hThread) {
		printf("Working|U");
		VirtualFreeEx(hProcess, mem, 0, MEM_RELEASE);
		VirtualFreeEx(hProcess, image, 0, MEM_RELEASE);
		CloseHandle(hProcess);
		VirtualFree(buffer, 0, MEM_RELEASE);
		return 0;
	}
	WaitForSingleObject(hThread, INFINITE);
	GetExitCodeThread(hThread, &ExitCode);
	if (!ExitCode) {
		printf("Deb error|U");
		VirtualFreeEx(hProcess, mem, 0, MEM_RELEASE);
		VirtualFreeEx(hProcess, image, 0, MEM_RELEASE);
		CloseHandle(hThread);
		CloseHandle(hProcess);
		VirtualFree(buffer, 0, MEM_RELEASE);
		return 0;
	}
	VirtualFreeEx(hProcess, mem, 0, MEM_RELEASE);
	CloseHandle(hThread);
	CloseHandle(hProcess);
	VirtualFree(buffer, 0, MEM_RELEASE);
	return 1;
}
bool GetPrivileges() {
	HANDLE hToken;
	TOKEN_PRIVILEGES tp;
	if (OpenProcessToken((HANDLE)-1, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
		tp.PrivilegeCount = 1;
		tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
		tp.Privileges[0].Luid.LowPart = 20;
		tp.Privileges[0].Luid.HighPart = 0;
		AdjustTokenPrivileges(hToken, FALSE, &tp, 0, NULL, NULL);
		CloseHandle(hToken);
		return true;
	}
	return false;
}
